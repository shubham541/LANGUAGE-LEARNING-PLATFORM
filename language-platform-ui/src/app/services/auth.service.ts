/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {
    HttpClient, HttpEvent, HttpHeaders, HttpResponse
} from '@angular/common/http';
import { Injectable } from '@angular/core';
import { JwtHelperService } from '@auth0/angular-jwt';
import { map, Observable } from 'rxjs';
import { Configuration } from '../configuration';
import { environment } from '../env/environment';
import { EmailLoginRequest } from '../model/emailLoginRequest';
import { ForgotPasswordRequest } from '../model/forgotPasswordRequest';
import { PayloadTokenResponse } from '../model/payloadTokenResponse';
import { Payloadboolean } from '../model/payloadboolean';
import { Payloadstring } from '../model/payloadstring';
import { RegisterRequest } from '../model/registerRequest';
import { TokenValidationRequest } from '../model/tokenValidationRequest';
import { UsernameLoginRequest } from '../model/usernameLoginRequest';
import { UsernameResponse } from '../model/usernameResponse';

@Injectable({
    providedIn: 'root'
})
export class AuthService {

    protected basePath = environment.authBasePath;
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    
    constructor(
        protected httpClient: HttpClient,
        public jwtHelper: JwtHelperService
    ) { }

    public get token(): string {
        return localStorage.getItem('token') || '';
    }

    private setToken = (tokenResponse: PayloadTokenResponse): PayloadTokenResponse => {
        if (tokenResponse?.data?.token) {
            const _token = tokenResponse.data.token;
            localStorage.setItem('token', _token);
        }
        return tokenResponse;
    }


    // ...
    public isAuthenticated(): boolean {
        const token = localStorage.getItem('token') || '';
        if (!token) {
            return false;
        }
        // Check whether the token is expired and return
        // true or false
        const isTokenExpired = this.jwtHelper.isTokenExpired(token);
        if (isTokenExpired) {
            localStorage.removeItem('token');
        }
        return !isTokenExpired;
    }

    public getCurrentUser(): string {
        const decoded = this.jwtHelper.decodeToken(this.token);
        if (decoded?.sub) {
            return this.jwtHelper.urlBase64Decode(decoded.sub);
        }
        return '';
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * fetchSecurityQn
     * 
     * @param username username
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public fetchSecurityQnUsingGET(username: string, reportProgress: boolean = false): Observable<any> {

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling fetchSecurityQnUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Payloadstring>(`${this.basePath}/v1/api/auth/${encodeURIComponent(String(username))}/securityQn`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * forgotPassword
     * 
     * @param forgotPasswordRequest forgotPasswordRequest
     * @param username username
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
   public forgotPasswordUsingPOST(forgotPasswordRequest: ForgotPasswordRequest, username: string, reportProgress: boolean = false): Observable<any> {

        if (forgotPasswordRequest === null || forgotPasswordRequest === undefined) {
            throw new Error('Required parameter forgotPasswordRequest was null or undefined when calling forgotPasswordUsingPOST.');
        }

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling forgotPasswordUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Payloadboolean>(`${this.basePath}/v1/api/auth/${encodeURIComponent(String(username))}/forgot`,
            forgotPasswordRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * loginWithEmail
     * 
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginWithEmailUsingPOST(request: EmailLoginRequest, observe?: 'body', reportProgress?: boolean): Observable<PayloadTokenResponse>;
    public loginWithEmailUsingPOST(request: EmailLoginRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PayloadTokenResponse>>;
    public loginWithEmailUsingPOST(request: EmailLoginRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PayloadTokenResponse>>;
    public loginWithEmailUsingPOST(request: EmailLoginRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling loginWithEmailUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PayloadTokenResponse>(`${this.basePath}/v1/api/auth/login/email`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                reportProgress: reportProgress
            }
        ).pipe(map(this.setToken));
    }

    /**
     * loginWithUsername
     * 
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginWithUsernameUsingPOST(request: UsernameLoginRequest): Observable<PayloadTokenResponse> {

        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling loginWithUsernameUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PayloadTokenResponse>(`${this.basePath}/v1/api/auth/login/username`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
            }
        ).pipe(map(this.setToken));
    }

    /**
     * registerUser
     * 
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registerUserUsingPOST(request: RegisterRequest, observe?: 'body', reportProgress?: boolean): Observable<PayloadTokenResponse>;
    public registerUserUsingPOST(request: RegisterRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PayloadTokenResponse>>;
    public registerUserUsingPOST(request: RegisterRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PayloadTokenResponse>>;
    public registerUserUsingPOST(request: RegisterRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling registerUserUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PayloadTokenResponse>(`${this.basePath}/v1/api/auth/register`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                reportProgress: reportProgress
            }
        ).pipe(map(this.setToken));
    }

    /**
     * validateToken
     * 
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public validateTokenUsingPOST(request: TokenValidationRequest, observe?: 'body', reportProgress?: boolean): Observable<UsernameResponse>;
    public validateTokenUsingPOST(request: TokenValidationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UsernameResponse>>;
    public validateTokenUsingPOST(request: TokenValidationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UsernameResponse>>;
    public validateTokenUsingPOST(request: TokenValidationRequest, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling validateTokenUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UsernameResponse>(`${this.basePath}/v1/api/auth/validate`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
